{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/dashboardReducer.js","redux/reducers/eventReducer.js","redux/reducers/registerReducer.js","redux/reducers/miscDataReducer.js","redux/reducers/registrationReducer.js","redux/reducers/adminReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registerSaga.js","redux/sagas/userSaga.js","redux/sagas/dashboardSaga.js","redux/sagas/eventSaga.js","redux/sagas/miscDataSaga.js","redux/sagas/registrationSaga.js","redux/sagas/adminSaga.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/Admin/Dashboard/Attendees/AttendeeTable.js","components/Admin/Dashboard/Events/EventsTableRow.js","components/Admin/Dashboard/Events/EventsTable.js","components/Admin/Dashboard/Authorization/authorizationrow.js","components/Admin/Dashboard/Authorization/authorizationtable.js","components/Admin/Dashboard/DashboardTableTabs.js","components/Admin/Dashboard/Dashboard.js","components/UserPage/UserPageRows.js","components/UserPage/UserTableBody.js","components/UserPage/UserPage.js","components/ProtectedRoute/ProtectedRoute.js","components/Events/EventDialog.js","components/Events/EventsList.js","components/Events/Events.js","components/Events/CreateEventForm.js","components/Events/CreateEvent.js","components/News/News.js","components/News/AddNews.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","arguments","length","undefined","type","registrationMessage","loginMode","userReducer","action","payload","attendees","events","registered","genders","countries","eventRegistration","admin","rootReducer","errors","user","loginUser","logoutUser","loginSaga","config","regenerator_default","a","wrap","_context","prev","next","put","headers","Content-Type","withCredentials","axios","post","t0","console","log","response","status","stop","_marked","this","_context2","_marked2","_context3","takeLatest","_marked3","registerUser","registerSaga","registerSaga_marked","registerSaga_marked2","fetchUser","userSaga","get","sent","data","userSaga_marked","userSaga_marked3","fetchAttendees","dashboardSaga","alert","dashboardSaga_marked","dashboardSaga_marked2","fetchEvents","createEvent","deleteEvent","updateEvent","registerForEvent","eventSaga","nextAction","eventSaga_marked","eventSaga_marked2","delete","concat","eventSaga_marked3","_context4","_marked4","_context5","_marked5","_context6","_marked6","fetchGenders","fetchCountries","miscDataSaga","miscDataSaga_marked","miscDataSaga_marked2","miscDataSaga_marked3","fetchRegisteredEvents","unRegisterEvent","registrationSaga","registrationSaga_marked","registrationSaga_marked2","registrationSaga_marked3","fetchAdmin","updateAdmin","adminSaga","adminSaga_marked","adminSaga_marked2","adminSaga_marked3","rootSaga","all","sagas_marked","connect","props","react_default","createElement","className","onClick","dispatch","Link","to","id","auth_id","Fragment","components_LogOutButton_LogOutButton","Footer","LoginPage","username","password","login","event","preventDefault","_this","handleInputChangeFor","propertyName","setState","Object","defineProperty","target","value","_this2","role","Paper_default","elevation","Typography_default","variant","Tooltip_default","title","TextField_default","label","Person_default","onChange","Security_default","Button_default","color","Component","RegisterPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","name","dob","email","phone","hometown","country_id","gender_id","facebook_username","employer","job_title","food_preferences","preferred_transportation","comments","reduxStore","index_es","select","helperText","map","result","MenuItem_default","key","option","multiline","AttendeeTestTable3","dist_default","columns","field","options","filterType","responsive","jsonMode","EventsTableRow","event_name","event_start_date","event_end_date","event_time","event_city","event_country","event_host","event_description","getEvents","updateEvents","swal","text","icon","buttons","dangerMode","handleChange","then","willDelete","TableRow_default","TableCell_default","align","Input_default","placeholder","rowsMax","Fab_default","size","Done_default","Delete_default","EventsTable","classes","root","tableWrapper","Table_default","table","TableHead_default","TableBody_default","i","Events_EventsTableRow","withStyles","theme","width","marginTop","spacing","unit","minWidth","overflowX","AuthorizationRow","componentDidMount","Select_default","displayEmpty","AuthorizationTable","authorizationrow","TabContainer","component","style","padding","children","DashboardTableTabs","AppBar_default","position","Tabs_default","Tab_default","AttendeeTable","Events_EventsTable","authorizationtable","Dashboard","changePage","history","push","handleChangeSelect","labelWidth","Dashboard_DashboardTableTabs","Create_default","UserPageRows","unRegister","getRegisteredEvents","UserTableBody","UserPage_UserPageRows","InputLabel_default","moment","format","UserPage_UserTableBody","_ref","ComponentToShow","ComponentToProtect","otherProps","objectWithoutProperties","UserPage","Route","assign","textOnly","items","outlook","outlookcom","apple","google","EventDialog","open","person_id","event_id","description","location","startTime","endTime","handleClickOpen","handleCancel","handleClose","confirm","window","href","Dialog_default","disableBackdropClick","disableEscapeKeyDown","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","Divider_default","DialogActions_default","react_add_to_calendar_min_default","buttonTemplate","buttonLabel","listItems","displayItemIcons","EventsList","expanded","handleExpandClick","Grid_default","item","lg","Card_default","card","CardHeader_default","subheader","CardContent_default","CardActions_default","actions","disableActionSpacing","Events_EventDialog","person_name","height","margin","media","paddingTop","display","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","Events","container","direction","justify","alignItems","components_Events_EventsList","CreateEventForm","handleCreateEvent","noValidate","autoComplete","required","textField","descriptionField","button","flexWrap","marginRight","dense","menu","CreateEvent","ArrowLeft_default","Events_CreateEventForm","News","AddNews","App","HashRouter","components_Nav_Nav","Switch","Redirect","exact","from","path","components_ProtectedRoute_ProtectedRoute","render","components_Footer_Footer","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","ReactDOM","react_redux_es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.aa2fcf88.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","// this reducer stores event attendee info\nconst attendees = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ATTENDEES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n\nexport default attendees;\n","// this reducer stores all of the events\nconst events = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_EVENTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n\nexport default events;","// stores which users signed up for what events\nconst registered = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_REGISTERED':\n            return action.payload;\n        default:\n            return state;\n    }\n}\nexport default registered;","import { combineReducers } from 'redux';\n\nconst genders = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_GENDERS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nconst countries = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_COUNTRIES':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n\nexport default combineReducers({\n    genders,\n    countries,\n});","const eventRegistration = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_EVENT_REGISTRATION':\n            return action.payload;\n        default:\n            return state;\n    }\n}\nexport default eventRegistration;","// this reducer stores info regarding which users are admins\nconst admin = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_ADMIN':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n\n\n// user will be on the redux state at:\n// state.user\nexport default admin;\n","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport attendees from './dashboardReducer';\nimport events from './eventReducer';\nimport registered from './registerReducer';\nimport genders from './miscDataReducer';\nimport countries from './miscDataReducer';\nimport eventRegistration from './registrationReducer';\nimport admin from './adminReducer';\n\n\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  attendees,\n  events,\n  registered,\n  genders,\n  countries,\n  eventRegistration,\n  admin,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n\n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({ type: 'SET_TO_LOGIN_MODE' });\n  } catch (error) {\n    console.log('Error with user registration:', error);\n    yield put({ type: 'REGISTRATION_FAILED' });\n  }\n}\n\nfunction* registerSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registerSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('/api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* updateAdmin(action) {\n  try {\n    yield axios.put(`/api/user/update-admin`, action.payload);\n    yield put({ type: \"FETCH_ADMIN\" });\n  }\n  catch (error) {\n    yield console.log('error updateAdmin saga', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n\nfunction* fetchAttendees() {\n    try {\n        const response = yield axios.get(`/api/events`);\n        console.log(response);\n        yield put({ type: 'SET_ATTENDEES', payload: response.data });\n    } catch (error) {\n        console.log(`error in fetchAttendees`, error);\n        alert('something went wrong');\n    }\n}\n\nfunction* dashboardSaga() {\n    yield takeLatest('FETCH_ATTENDEES', fetchAttendees);\n}\n\nexport default dashboardSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\nfunction* fetchEvents() {\n    try {\n        const response = yield axios.get('/api/events/get-events');\n        const nextAction = { type: 'SET_EVENTS', payload: response.data };\n        yield put(nextAction);\n    } catch (error) {\n        console.log('Error with gettings events saga.');\n    }\n}\n\nfunction* createEvent(action) {\n    try {\n        yield axios.post('/api/events', action.payload);\n        const nextAction = { type: 'FETCH_EVENTS' };\n        yield put(nextAction);\n    }\n    catch (error) {\n        yield console.log('error in addProject saga', error);\n    }\n}\n\nfunction* deleteEvent(action) {\n    try {\n        yield axios.delete(`/api/events/${action.payload}`);\n        yield put({ type: \"FETCH_EVENTS\" });\n    }\n    catch (error) {\n        yield console.log('error deleteEvents saga', error);\n    }\n}\n\nfunction* updateEvent(action) {\n    try {\n        yield axios.put(`/api/events/update-event`, action.payload);\n        yield put({ type: \"FETCH_EVENTS\" });\n    }\n    catch (error) {\n        yield console.log('error updateEvents saga', error);\n    }\n}\n\nfunction* registerForEvent(action) {\n    try {\n        yield axios.post('/api/events/register', action.payload);\n        const nextAction = { type: 'FETCH_EVENTS' };\n        yield put(nextAction);\n    }\n    catch (error) {\n        yield console.log('error in registerForEvent saga', error);\n    }\n}\n\nfunction* eventSaga() {\n    yield takeLatest('FETCH_EVENTS', fetchEvents);\n    yield takeLatest('CREATE_EVENT', createEvent);\n    yield takeLatest('DELETE_EVENT', deleteEvent);\n    yield takeLatest('UPDATE_EVENT', updateEvent);\n    yield takeLatest('REGISTER_FOR_EVENT', registerForEvent);\n\n}\n\nexport default eventSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\nfunction* fetchGenders() {\n    try {\n        const response = yield axios.get(`/api/data/get-genders`);\n        console.log(response);\n        yield put({ type: 'SET_GENDERS', payload: response.data });\n    } catch (error) {\n        console.log(`error in fetchGenders`, error);\n        alert('something went wrong');\n    }\n}\n\nfunction* fetchCountries() {\n    try {\n        const response = yield axios.get(`/api/data/get-countries`);\n        console.log(response);\n        yield put({ type: 'SET_COUNTRIES', payload: response.data });\n    } catch (error) {\n        console.log(`error in fetchCountries`, error);\n        alert('something went wrong');\n    }\n}\n\n\n\nfunction* miscDataSaga() {\n    yield takeLatest('FETCH_GENDERS', fetchGenders);\n    yield takeLatest('FETCH_COUNTRIES', fetchCountries);\n\n}\n\nexport default miscDataSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\nfunction* fetchRegisteredEvents() {\n    try {\n        const response = yield axios.get('/api/events/get-registered-events');\n        const nextAction = { type: 'SET_EVENT_REGISTRATION', payload: response.data };\n        yield put(nextAction);\n    } catch (error) {\n        console.log('Error with gettings events saga.');\n    }\n}\n\nfunction* unRegisterEvent(action) {\n    try {\n        yield axios.delete(`/api/unregister/${action.payload}`);\n        yield put({ type: \"FETCH_REGISTERED_EVENTS\" });\n    }\n    catch (error) {\n        yield console.log('error unRegister saga', error);\n    }\n}\n\nfunction* registrationSaga() {\n    yield takeLatest('FETCH_REGISTERED_EVENTS', fetchRegisteredEvents);\n    yield takeLatest('UNREGISTER_FROM_EVENT', unRegisterEvent);\n}\n\nexport default registrationSaga;","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n\nfunction* fetchAdmin() {\n    try {\n        const response = yield axios.get(`/api/user/admin`);\n        console.log(response);\n        yield put({ type: 'SET_ADMIN', payload: response.data });\n    } catch (error) {\n        console.log(`error in fetchAdmin`, error);\n        alert('something went wrong');\n    }\n}\nfunction* updateAdmin(action) {\n    try {\n        yield axios.put(`/api/user/update-admin`, action.payload);\n        yield put({ type: \"FETCH_ADMIN\" });\n    }\n    catch (error) {\n        yield console.log('error updateAdmin saga', error);\n    }\n}\n\nfunction* adminSaga() {\n    yield takeLatest('FETCH_ADMIN', fetchAdmin);\n    yield takeLatest('UPDATE_ADMIN', updateAdmin);\n\n}\n\nexport default adminSaga;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registerSaga from './registerSaga';\nimport userSaga from './userSaga';\nimport dashboardSaga from './dashboardSaga';\nimport eventSaga from './eventSaga';\nimport miscDataSaga from './miscDataSaga';\nimport registrationSaga from './registrationSaga';\nimport adminSaga from './adminSaga';\n\n\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    miscDataSaga(),\n    dashboardSaga(),\n    eventSaga(),\n    loginSaga(),\n    registerSaga(),\n    userSaga(),\n    registrationSaga(),\n    adminSaga(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/account\">\n      <h2 className=\"nav-title\">MAKE Events</h2>\n    </Link>\n    <div className=\"nav-right\">\n      {/* Show the link to the info page and the logout button if the user is logged in */}\n      <Link className=\"nav-link\" to=\"/events\">\n        Events\n      </Link>\n      {/* Always show this link since the about page is not protected */}\n      <Link className=\"nav-link\" to=\"/news\">\n        News\n      </Link>\n      <Link className=\"nav-link\" to=\"/account\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {props.user.id ? 'Account' : 'Login / Register'}\n      </Link>\n      {props.user.auth_id >= 2 && (\n        <>\n          <Link className=\"nav-link\" to=\"/dashboard\">\n            Dashboard\n        </Link>\n        </>\n      )}\n      {props.user.id && (\n        <LogOutButton className=\"nav-link\" />\n      )}\n\n    </div>\n  </div>\n);\n\n\n\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({user});\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    &copy; MAKE Communication, LLC 2018-19\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Security from '@material-ui/icons/Security';\nimport Person from '@material-ui/icons/Person';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport './LoginPage.css';\n\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.loginMessage && (\n          <h2\n            className=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.errors.loginMessage}\n          </h2>\n        )}\n        <center>\n          <Paper id=\"login-paper\" elevation={3}>\n            <center>\n              <Typography variant=\"h6\">\n                Login\n          </Typography>\n              <div id=\"div\">\n                <Tooltip title=\"Please enter your username\">\n                  <TextField\n                    label={<Person />}\n                    variant=\"filled\"\n                    value={this.state.username}\n                    onChange={this.handleInputChangeFor('username')}\n                  >\n                  </TextField>\n                </Tooltip>\n              </div>\n              <div id=\"div\">\n                <Tooltip title=\"Please enter your password\">\n                  <TextField\n                    label={<Security />}\n                    variant=\"filled\"\n                    type=\"password\"\n                    value={this.state.password}\n                    onChange={this.handleInputChangeFor('password')}\n                  >\n                  </TextField>\n                </Tooltip>\n              </div>\n              <div id=\"div\">\n                <Button variant=\"contained\" color=\"primary\" onClick={this.login}>\n                  Login\n            </Button>\n              </div>\n            </center>\n          </Paper>\n          <center>\n            <div id=\"div\">\n              <Button\n                variant=\"contained\"\n                onClick={() => { this.props.dispatch({ type: 'SET_TO_REGISTER_MODE' }) }}\n              >\n                Register\n          </Button>\n            </div>\n          </center>\n        </center>\n      </div >\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(LoginPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport './RegisterPage.css';\nimport { Typography } from '@material-ui/core';\n\nconst genders = [\n  {\n    value: 1,\n    label: 'Male',\n  },\n  {\n    value: 2,\n    label: 'Female',\n  },\n  {\n    value: 3,\n    label: 'Non-binary',\n  },\n];\n\nconst countries = [\n  {\n    value: 18,\n    label: 'Bangladesh',\n  },\n  {\n    value: 25,\n    label: 'Bhutan',\n  },\n  {\n    value: 32,\n    label: 'Brunei',\n  },\n  {\n    value: 36,\n    label: 'Cambodia',\n  },\n  {\n    value: 44,\n    label: 'China',\n  },\n  {\n    value: 96,\n    label: 'Hong Kong',\n  },\n  {\n    value: 99,\n    label: 'India',\n  },\n  {\n    value: 100,\n    label: 'Indonesia',\n  },\n  {\n    value: 107,\n    label: 'Japan',\n  },\n  {\n    value: 112,\n    label: 'Korea, North',\n  },\n  {\n    value: 113,\n    label: 'Korea, South',\n  },\n  {\n    value: 116,\n    label: 'Laos',\n  },\n  {\n    value: 125,\n    label: 'Macao',\n  },\n  {\n    value: 129,\n    label: 'Malaysia',\n  },\n  {\n    value: 146,\n    label: 'Myanmar',\n  },\n  {\n    value: 149,\n    label: 'Nepal',\n  },\n  {\n    value: 162,\n    label: 'Pakistan',\n  },\n  {\n    value: 166,\n    label: 'Papua New Guinea',\n  },\n  {\n    value: 169,\n    label: 'Philippines',\n  },\n  {\n    value: 192,\n    label: 'Singapore',\n  },\n  {\n    value: 200,\n    label: 'Sri Lanka',\n  },\n  {\n    value: 208,\n    label: 'Taiwan',\n  },\n  {\n    value: 211,\n    label: 'Thailand',\n  },\n  {\n    value: 218,\n    label: 'Turkey',\n  },\n  {\n    value: 219,\n    label: 'Turkmenistan',\n  },\n  {\n    value: 225,\n    label: 'United Kingdom',\n  },\n  {\n    value: 226,\n    label: 'United States',\n  },\n  {\n    value: 232,\n    label: 'Vietnam',\n  },\n  {\n    value: 0,\n    label: 'Other',\n  },\n];\n\nclass RegisterPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      name: '',\n      dob: '',\n      email: '',\n      phone: '',\n      hometown: '',\n      country_id: '',\n      gender_id: 'Select Gender',\n      facebook_username: '',\n      employer: '',\n      job_title: '',\n      food_preferences: '',\n      preferred_transportation: '',\n      comments: '',\n    }\n  }\n\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n          name: this.state.name,\n          dob: this.state.dob,\n          email: this.state.email,\n          phone: this.state.phone,\n          hometown: this.state.hometown,\n          country_id: this.state.country_id,\n          gender_id: this.state.gender_id,\n          facebook_username: this.state.facebook_username,\n          employer: this.state.employer,\n          job_title: this.state.job_title,\n          food_preferences: this.state.food_preferences,\n          preferred_transportation: this.state.preferred_transportation,\n          comments: this.state.comments,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'REGISTRATION_INPUT_ERROR' });\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n\n        {this.props.reduxStore.errors.registrationMessage && (\n          <h2\n            id=\"alert\"\n            role=\"alert\"\n          >\n            {this.props.reduxStore.errors.registrationMessage}\n          </h2>\n        )}\n\n        <Paper elevation={3} id=\"register-paper\">\n          <center>\n            <Typography id=\"text-div\" variant=\"h6\">\n              Register For An Account\n        </Typography>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Username\"\n                variant=\"filled\"\n                value={this.state.username}\n                onChange={this.handleInputChangeFor('username')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Choose Password\"\n                type=\"password\"\n                variant=\"filled\"\n                value={this.state.password}\n                onChange={this.handleInputChangeFor('password')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Full Name\"\n                variant=\"filled\"\n                value={this.state.name}\n                onChange={this.handleInputChangeFor('name')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Date of Birth\"\n                variant=\"filled\"\n                value={this.state.dob}\n                onChange={this.handleInputChangeFor('dob')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Email Address\"\n                variant=\"filled\"\n                value={this.state.email}\n                onChange={this.handleInputChangeFor('email')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Phone Number\"\n                variant=\"filled\"\n                value={this.state.phone}\n                onChange={this.handleInputChangeFor('phone')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Hometown\"\n                variant=\"filled\"\n                value={this.state.hometown}\n                onChange={this.handleInputChangeFor('hometown')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                select\n                label=\"Country\"\n                variant=\"filled\"\n                value={this.state.country_id}\n                onChange={this.handleInputChangeFor('country_id')}\n                helperText=\"Please select your country\"\n              >\n                {countries.map(result => (\n                  <MenuItem key={result.value} value={result.value}>\n                    {result.label}\n                  </MenuItem>\n\n\n                ))}\n              </TextField>\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                select\n                label=\"Gender\"\n                variant=\"filled\"\n                value={this.state.gender_id}\n                onChange={this.handleInputChangeFor('gender_id')}\n                helperText=\"Please select your gender\"\n              >\n                {genders.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Social Media Url(s)\"\n                variant=\"filled\"\n                value={this.state.facebook_username}\n                onChange={this.handleInputChangeFor('facebook_username')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Employer\"\n                variant=\"filled\"\n                value={this.state.employer}\n                onChange={this.handleInputChangeFor('employer')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Job Title\"\n                variant=\"filled\"\n                value={this.state.job_title}\n                onChange={this.handleInputChangeFor('job_title')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Food Preferences\"\n                variant=\"filled\"\n                value={this.state.food_preferences}\n                onChange={this.handleInputChangeFor('food_preferences')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                label=\"Preferred Transportation\"\n                variant=\"filled\"\n                value={this.state.preferred_transportation}\n                onChange={this.handleInputChangeFor('preferred_transportation')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <TextField\n                multiline\n                label=\"Comments\"\n                variant=\"filled\"\n                value={this.state.comments}\n                onChange={this.handleInputChangeFor('comments')}\n              />\n            </div>\n            <div id=\"text-div\">\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={this.registerUser}\n              >\n                Create Account\n                </Button>\n            </div>\n          </center>\n        </Paper>\n        <center>\n          <div>\n            <Button\n              id=\"login-btn\"\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() => { this.props.dispatch({ type: 'SET_TO_LOGIN_MODE' }) }}\n            >\n              Login\n          </Button>\n          </div>\n        </center>\n      </div>\n    )\n  }\n};\n\n// // Instead of taking everything from state, we just want the error messages.\n// // if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({errors});\n\n// const mapStateToProps = state => ({\n//   errors: state.errors,\n//   countries: state.countries,\n//   genders: state.genders,\n// });\n\n// // export default connect(mapStateToProps)(RegisterPage);\n\nconst mapStoreToProps = reduxStore => ({\n  reduxStore,\n});\n\nexport default connect(mapStoreToProps)(RegisterPage);\n\n","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport Paper from '@material-ui/core/Paper';\nimport './../Dashboard.css';\nimport moment from 'moment';\nimport MaterialDatatable from \"material-datatable\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\n\n// this component displays event attendees\nclass AttendeeTestTable3 extends Component {\n\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_ATTENDEES' });\n    }\n    // getMuiTheme = () => createMuiTheme({\n    //     overrides: {\n    //         MUIDataTable: { responsiveScroll: { maxHeight: 'none', }, },\n    //         MuiTableCell: { root: { padding: '5px 20px 5px 10px' }, },\n    //         MuiTableRow: { footer: { height: 40 } },\n    //         MuiTablePagination: { toolbar: { height: 40, minHeight: 40 } },\n    //         MUIDataTableBodyCell: {}\n    //     },\n    // });\n\n\n    render() {\n        const columns = [\n            { name: \"Name\", field: \"name\" },\n            { name: \"Event\", field: \"event_name\" },\n            { name: \"DOB\", field: \"to_char\" },\n            { name: \"Email\", field: \"email\" },\n            { name: \"Phone\", field: \"phone\" },\n            { name: \"Hometown\", field: \"hometown\" },\n            { name: \"Country\", field: \"country_name\" },\n            { name: \"Gender\", field: \"gender\" },\n            { name: \"Social\", field: \"facebook_username\" },\n            { name: \"Employer\", field: \"employer\" },\n            { name: \"Job Title\", field: \"job_title\" },\n            { name: \"Food Prefs\", field: \"food_preferences\" },\n            { name: \"Pref. Transportation\", field: \"preferred_transportation\" },\n            { name: \"Comments\", field: \"comments\" }\n        ];\n\n\n\n\n        const options = {\n            filterType: \"multiselect\",\n            responsive: \"scroll\",\n            jsonMode: true,\n        };\n\n        return (\n            <Paper elevation={3}>\n                {/* {JSON.stringify(this.props.reduxStore.attendees)} */}\n\n                {/* <MuiThemeProvider theme={this.getMuiTheme()}> */}\n                <MaterialDatatable\n                    title={\"Attendees\"}\n                    data={this.props.reduxStore.attendees}\n                    columns={columns}\n                    options={options}\n                />\n                {/* </MuiThemeProvider> */}\n            </Paper>\n\n        );\n    }\n}\n\nconst mapStoreToProps = (reduxStore) => ({ reduxStore });\n\nexport default connect(mapStoreToProps)(AttendeeTestTable3);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Input from '@material-ui/core/Input';\nimport Fab from '@material-ui/core/Fab';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Done from '@material-ui/icons/Done';\nimport swal from 'sweetalert';\nimport moment from 'moment';\n\n\n\n\n\nclass EventsTableRow extends Component {\n    state = {\n        id: this.props.result.id,\n        event_name: this.props.result.event_name,\n        event_start_date: this.props.result.event_start_date,\n        event_end_date: this.props.result.event_end_date,\n        event_time: this.props.result.event_time,\n        event_city: this.props.result.event_city,\n        event_country: this.props.result.event_country,\n        event_host: this.props.result.event_host,\n        event_description: this.props.result.event_description,\n    }\n\n\n    getEvents = () => {\n        this.props.dispatch({ type: 'FETCH_EVENTS' });\n    }\n\n    updateEvents = () => {\n        const action = ({ type: 'UPDATE_EVENT', payload: this.state });\n        this.props.dispatch(action);\n        this.getEvents();\n        swal({\n            title: \"Awesome!\",\n            text: \"You've successfully updated the event!\",\n            icon: \"success\",\n            buttons: true,\n            dangerMode: false,\n        })\n    }\n\n    handleChange = propertyName => event => {\n        this.setState({\n            [propertyName]: event.target.value,\n        });\n    };\n\n\n    deleteEvent = () => {\n        swal({\n            title: \"Are you sure?\",\n            text: \"Once deleted, you will not be able to recover your data!\",\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n        })\n            .then((willDelete) => {\n                if (willDelete) {\n                    swal(\"Poof! Your event has been deleted forever!\", {\n                        icon: \"success\",\n                    });\n                    const action = ({ type: 'DELETE_EVENT', payload: this.props.result.id });\n                    this.props.dispatch(action);\n\n                } else {\n                    swal(\"Your data is safe!\");\n                }\n            });\n        this.getEvents();\n    }\n\n\n    render() {\n        return (\n            <TableRow>\n                <TableCell align=\"center\">\n                    <Input\n                        label=\"event-name\"\n                        placeholder={this.props.result.event_name}\n                        multiline\n                        onChange={this.handleChange('event_name')}\n                        rowsMax=\"10\" />\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Input\n                        label=\"event-start_date\"\n                        placeholder={this.props.result.event_start_date}\n                        multiline\n                        onChange={this.handleChange('event_start_date')}\n                        rowsMax=\"10\" />\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Input\n                        label=\"event-end-date\"\n                        placeholder={this.props.result.event_end_date}\n                        multiline\n                        onChange={this.handleChange('event_end_date')}\n                        rowsMax=\"10\" />\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Input\n                        label=\"event-time\"\n                        placeholder={this.props.result.event_time}\n                        multiline\n                        onChange={this.handleChange('event_time')}\n                        rowsMax=\"10\" />\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Input\n                        label=\"event-city\"\n                        placeholder={this.props.result.event_city}\n                        multiline\n                        onChange={this.handleChange('event_city')}\n                        rowsMax=\"10\" />\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Input\n                        label=\"event-country\"\n                        placeholder={this.props.result.event_country}\n                        multiline\n                        onChange={this.handleChange('event_country')}\n                        rowsMax=\"10\" />\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Input\n                        label=\"event-host\"\n                        placeholder={this.props.result.event_host}\n                        multiline\n                        onChange={this.handleChange('event_host')}\n                        rowsMax=\"10\" />\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Input\n                        label=\"event-description\"\n                        placeholder={this.props.result.event_description}\n                        multiline\n                        onChange={this.handleChange('event_description')}\n                        rowsMax=\"10\" />\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Fab color=\"primary\" onClick={this.updateEvents} size='small'><Done></Done></Fab>\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Fab color=\"secondary\" onClick={this.deleteEvent} size='small'><DeleteIcon></DeleteIcon></Fab>\n                </TableCell>\n            </TableRow>\n        )\n    }\n};\n\n\n\nconst mapStoreToProps = reduxStore => ({ reduxStore, });\nexport default connect(mapStoreToProps)(EventsTableRow);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n// import TableFooter from '@material-ui/core/TableFooter';\n// import TablePagination from '@material-ui/core/TablePagination';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Paper from '@material-ui/core/Paper';\nimport Input from '@material-ui/core/Input';\n\nimport EventsTableRow from './EventsTableRow';\n// import IconButton from '@material-ui/core/IconButton';\n// import FirstPageIcon from '@material-ui/icons/FirstPage';\n// import KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\n// import KeyboardArrowcenter from '@material-ui/icons/KeyboardArrowcenter';\n// import LastPageIcon from '@material-ui/icons/LastPage';\n\nconst actionsStyles = theme => ({\n    root: {\n        flexShrink: 0,\n        color: theme.palette.text.secondary,\n        marginLeft: theme.spacing.unit * 2.5,\n    },\n});\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing.unit * 3,\n    },\n    table: {\n        minWidth: 1500,\n    },\n    tableWrapper: {\n        overflowX: 'auto',\n    },\n});\n\n\nclass EventsTable extends Component {\n\n    componentDidMount() {\n        const action = { type: 'FETCH_EVENTS' };\n        console.log(action);\n        this.props.dispatch(action);\n    }\n\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Paper className={classes.root} >\n                <div className={classes.tableWrapper}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">Name</TableCell>\n                                <TableCell align=\"center\">Start Date</TableCell>\n                                <TableCell align=\"center\">End Date</TableCell>\n                                <TableCell align=\"center\">Time</TableCell>\n                                <TableCell align=\"center\">City</TableCell>\n                                <TableCell align=\"center\">Country</TableCell>\n                                <TableCell align=\"center\">Host</TableCell>\n                                <TableCell align=\"center\">Description</TableCell>\n                                <TableCell align=\"center\">Edit</TableCell>\n                                <TableCell align=\"center\">Remove</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.props.reduxStore.events.map((result, i) => (\n                                <EventsTableRow key={i} result={result} />\n                            ))}\n                        </TableBody>\n                    </Table>\n                </div>\n            </Paper>\n\n        );\n    }\n};\n\n\n\n\n\nconst mapStoreToProps = (reduxStore) => ({ reduxStore })\nexport default connect(mapStoreToProps)(withStyles(styles)(EventsTable));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Fab from '@material-ui/core/Fab';\nimport Done from '@material-ui/icons/Done';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport swal from 'sweetalert';\n\nconst admin = [\n    { label: 'yes', value: 2 },\n    { label: 'no', value: 1 },\n];\n\n\n\nclass AuthorizationRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.result.id,\n            name: this.props.result.name,\n            auth_id: '',\n        }\n    }\n\n    componentDidMount = () => {\n        this.props.dispatch({ type: 'FETCH_ADMIN' });\n    }\n\n    updateAdmin = () => {\n        const action = ({ type: 'UPDATE_ADMIN', payload: this.state });\n        this.props.dispatch(action);\n        swal({\n            title: \"Awesome!\",\n            text: \"You've successfully given the user admin privileges.\",\n            icon: \"success\",\n            buttons: true,\n            dangerMode: false,\n        })\n    }\n\n    handleChange = propertyName => event => {\n        this.setState({\n            [propertyName]: event.target.value,\n        });\n    };\n\n\n\n    render() {\n        return (\n            <TableRow>\n                <TableCell align=\"center\">\n                    {this.state.name}\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Select\n                        label=\"attendee-auth-id\"\n                        value={this.state.auth_id}\n                        onChange={this.handleChange('auth_id')}\n                        displayEmpty\n                        name=\"auth\"\n                    >\n                        {admin.map(result => (\n                            <MenuItem key={result.value} value={result.value}>\n                                {result.label}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </TableCell>\n                <TableCell align=\"center\">\n                    <Tooltip title=\"Update\">\n                        <Fab color=\"primary\" onClick={this.updateAdmin} size='small'><Done></Done></Fab>\n                    </Tooltip>\n                </TableCell>\n            </TableRow>\n        )\n    }\n};\n\n\n\nconst mapStoreToProps = reduxStore => ({ reduxStore, });\nexport default connect(mapStoreToProps)(AuthorizationRow);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n// import TableFooter from '@material-ui/core/TableFooter';\n// import TablePagination from '@material-ui/core/TablePagination';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Paper from '@material-ui/core/Paper';\nimport AuthorizationRow from './authorizationrow';\n// import IconButton from '@material-ui/core/IconButton';\n// import FirstPageIcon from '@material-ui/icons/FirstPage';\n// import KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\n// import KeyboardArrowcenter from '@material-ui/icons/KeyboardArrowcenter';\n// import LastPageIcon from '@material-ui/icons/LastPage';\n\nconst actionsStyles = theme => ({\n    root: {\n        flexShrink: 0,\n        color: theme.palette.text.secondary,\n        marginLeft: theme.spacing.unit * 2.5,\n    },\n});\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing.unit * 3,\n    },\n    table: {\n        minWidth: 1500,\n    },\n    tableWrapper: {\n        overflowX: 'auto',\n    },\n});\n\n// this component allows the admin to grant other users admin privileges\nclass AuthorizationTable extends Component {\n\n    componentDidMount() {\n        const action = { type: 'FETCH_ADMIN' };\n        console.log(action);\n        this.props.dispatch(action);\n    }\n\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Paper className={classes.root} >\n                <div className={classes.tableWrapper}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">Name</TableCell>\n                                <TableCell align=\"center\">Admin Status</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.props.reduxStore.admin.map((result, i) => (\n                                <AuthorizationRow key={i} result={result} />\n                            ))}\n                        </TableBody>\n                    </Table>\n                </div>\n            </Paper>\n\n        );\n    }\n};\n\n\n\n\n\nconst mapStoreToProps = (reduxStore) => ({ reduxStore })\nexport default connect(mapStoreToProps)(withStyles(styles)(AuthorizationTable));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport AttendeeTable from './../Dashboard/Attendees/AttendeeTable';\nimport EventsTable from './../Dashboard/Events/EventsTable';\nimport AuthorizationTable from './../Dashboard/Authorization/authorizationtable';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport './Dashboard.css';\n\n// this container contains multiple tables\nfunction TabContainer(props) {\n    return (\n        <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n            {props.children}\n        </Typography>\n    );\n}\n\nTabContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nclass DashboardTableTabs extends Component {\n    state = {\n        value: 0,\n    };\n\n    handleChange = (event, value) => {\n        this.setState({ value });\n    };\n\n    render() {\n        const { value } = this.state;\n\n        return (\n            <div id=\"container\">\n                <AppBar id=\"appbar\" position=\"static\">\n                    <Tabs value={value} onChange={this.handleChange}>\n                        <Tab id=\"tab\" label=\"Attendees\" />\n                        <Tab id=\"tab\" label=\"Volunteers\" />\n                        <Tab id=\"tab\" label=\"Applications\" />\n                        <Tab id=\"tab\" label=\"Edit Events\" />\n                        <Tab id=\"tab\" label=\"Edit Admins\" />\n\n\n                    </Tabs>\n                </AppBar>\n                {value === 0 && <TabContainer><AttendeeTable /></TabContainer>}\n                {value === 1 && <TabContainer>Volunteers</TabContainer>}\n                {value === 2 && <TabContainer>Applications</TabContainer>}\n                {value === 3 && <TabContainer><EventsTable /></TabContainer>}\n                {value === 4 && <TabContainer><AuthorizationTable /></TabContainer>}\n\n\n            </div>\n        );\n    }\n}\n\nDashboardTableTabs.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStoreToProps = reduxStore => ({ reduxStore })\n\n\nexport default connect(mapStoreToProps)(DashboardTableTabs);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport DashboardTableTabs from './../Dashboard/DashboardTableTabs';\nimport Button from '@material-ui/core/Button';\nimport Create from '@material-ui/icons/Create';\n\n\nimport './Dashboard.css';\n\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            events: 'Select Event',\n            labelWidth: 0,\n        }\n    }\n\n    componentDidMount() {\n        const action = { type: 'FETCH_EVENTS' };\n        this.props.dispatch(action);\n    }\n\n    changePage = () => {\n        this.props.history.push(`/create-event`);\n    }\n\n    handleChangeSelect = (event) => {\n        this.setState({\n            events: event.target.value\n        });\n    }\n\n    // handleChange = event => {\n    //     this.setState({})\n    // }\n\n    render() {\n\n        return (\n            <div>\n                <h1 id=\"dashboard\">Dashboard</h1>\n                <DashboardTableTabs />\n                <center>\n                    <Button color=\"primary\" onClick={this.changePage} variant=\"contained\"><Create />Create New Event</Button>\n                </center>\n            </div>\n\n        )\n    }\n};\n\n\n\n\nconst mapStoreToProps = reduxStore => ({ reduxStore, });\n\nexport default connect(mapStoreToProps)(Dashboard);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport swal from 'sweetalert';\nimport Divider from '@material-ui/core/Divider';\nimport moment from 'moment'\nimport './UserPage.css';\n\nclass UserPageRows extends Component {\n    componentDidMount() {\n        this.getRegisteredEvents();\n    }\n    getRegisteredEvents() {\n        this.props.dispatch({ type: 'FETCH_REGISTERED_EVENTS' });\n    }\n\n    unRegister = () => {\n        swal({\n            title: \"Are you sure you want to unregister?\",\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n        })\n            .then((willDelete) => {\n                if (willDelete) {\n                    swal(\"You have successfully unregistered\", {\n                        icon: \"success\",\n                    });\n                    const action = ({ type: 'UNREGISTER_FROM_EVENT', payload: this.props.reduxStore.eventRegistration.id });\n                    this.props.dispatch(action);\n\n                } else {\n                    swal(\"You're still on!\");\n                }\n            });\n        this.getRegisteredEvents();\n    }\n    render() {\n        return (\n\n            <TableRow>\n                <TableCell align=\"center\">{this.props.result.event_name}</TableCell>\n                <TableCell align=\"center\">{this.props.result.event_start_date}</TableCell>\n                <TableCell align=\"center\">{this.props.result.event_city}</TableCell>\n                <TableCell align=\"center\">\n                    <Button color=\"secondary\" onClick={this.unRegister} variant='contained'>Unregister</Button>\n                </TableCell>\n            </TableRow>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n});\n\nexport default connect(mapStateToProps)(UserPageRows);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TableBody from '@material-ui/core/TableBody';\nimport UserPageRows from './UserPageRows';\n\nclass UserTableBody extends Component {\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_REGISTERED_EVENTS' })\n    }\n    render() {\n        return (\n            <TableBody>\n                {this.props.reduxStore.eventRegistration.map((result, i) => (\n                    <UserPageRows key={i} result={result} />\n                ))}\n            </TableBody>\n        )\n    }\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n});\n\nexport default connect(mapStateToProps)(UserTableBody);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport moment from 'moment'\nimport UserTableBody from './../UserPage/UserTableBody';\nimport './UserPage.css';\n\n// class UserPage extends Component {\n//   componentDidMount() {\n//     this.props.dispatch({ type: 'FETCH_REGISTERED_EVENTS' });\n//   }\n//   render() {\n//     return (\n//       <UserDetails />\n//     )\n//   }\n// }\n\nconst UserPage = (props) => (\n  <div>\n    <Paper id=\"user-paper\">\n      <Typography id=\"header\" variant=\"h5\">\n        Your Account Information\n    </Typography>\n      <Paper id=\"paper\" elevation={3}>\n        <Typography variant=\"h6\">\n          Welcome, {props.reduxStore.user.username}!\n    </Typography>\n        <InputLabel id=\"text-field\">\n          Name:\n      </InputLabel>\n        <Input id=\"text-field\" label=\"Name\" placeholder={props.reduxStore.user.name}></Input>\n        <InputLabel id=\"text-field\">\n          Birthdate:\n      </InputLabel>\n        <Input id=\"text-field\" label=\"Birthdate\" placeholder={moment(props.reduxStore.user.dob).format(\"MMMM Do, YYYY\")}></Input>\n        <InputLabel id=\"text-field\">\n          Email:\n      </InputLabel>\n        <Input id=\"text-field\" label=\"Email\" placeholder={props.reduxStore.user.email}></Input>\n        <InputLabel id=\"text-field\">\n          Phone:\n      </InputLabel>\n        <Input id=\"text-field\" label=\"Phone\" placeholder={props.reduxStore.user.phone}></Input>\n        <InputLabel id=\"text-field\">\n          Hometown:\n      </InputLabel>\n        <Input id=\"text-field\" label=\"Hometown\" placeholder={props.reduxStore.user.hometown}></Input>\n        <InputLabel id=\"text-field\">\n          Country:\n      </InputLabel>\n        <Input id=\"text-field\" label=\"Country\" placeholder={props.reduxStore.user.country_id}></Input>\n        <InputLabel id=\"text-field\">\n          Gender:\n      </InputLabel>\n        <Input id=\"text-field\" label=\"Gender\" placeholder={props.reduxStore.user.gender_id}></Input>\n        <InputLabel id=\"text-field\">\n          Food Preferences:\n      </InputLabel>\n        <Input id=\"text-field\" label=\"Food Preferences\" placeholder={props.reduxStore.user.food_preferences}></Input>\n        <InputLabel id=\"text-field\">\n          Preferred Transportation:\n      </InputLabel>\n        <Input id=\"text-field\" label=\"Preferred Transportation\" placeholder={props.reduxStore.user.preferred_transportation}></Input>\n        <center>\n          <div>\n            <Button id=\"update-btn\" color=\"primary\" variant='contained'>Update Profile</Button>\n          </div>\n        </center>\n      </Paper>\n      <div>\n        <Typography id=\"header\" variant=\"h5\">\n          Your Events\n          </Typography>\n        <Paper id=\"paper\" elevation={3}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\">Event</TableCell>\n                <TableCell align=\"center\">Date</TableCell>\n                <TableCell align=\"center\">City</TableCell>\n                <TableCell align=\"center\">Unregister</TableCell>\n              </TableRow>\n            </TableHead>\n            {/* {JSON.stringify(props.reduxStore.eventRegistration)} */}\n            <UserTableBody />\n          </Table>\n        </Paper>\n      </div>\n    </Paper>\n  </div>\n);\n\n// class FetchRegistered extends Component {\n//   componentDidMount = () => {\n//     this.props.dispatch({ type: 'FETCH_REGISTERED_EVENTS' });\n//   }\n//   render() {\n//     return (\n//       <UserPage />\n//     )\n//   }\n// }\n\n// class UserPageCallBack extends Component {\n//   componentDidMount() {\n//     this.props.dispatch({ type: 'FETCH_REGISTERED_EVENTS' });\n//   }\n// }\n\n\n\n// const mapStateToProps = state => ({\n//   user: state.user,\n// });\n\nconst mapStateToProps = reduxStore => ({\n  reduxStore,\n})\n\nexport default connect(mapStateToProps)(UserPage);\n","import React from 'react';\nimport { Route } from 'react-router-dom'\nimport { connect } from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\nimport Dashboard from './../Admin/Dashboard/Dashboard';\nimport UserPage from '../UserPage/UserPage';\n// import Dashboard from '../Admin/Dashboard';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if (user.auth_id >= 2) {\n    ComponentToShow = ComponentToProtect;\n  }\n  else if (user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = UserPage;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n    <Route\n      // all props like 'exact' and 'path' that were passed in\n      // are now passed along to the 'Route' Component\n      {...otherProps}\n      component={ComponentToShow}\n    />\n  )\n}\n\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\nconst mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport AddToCalendar from \"react-add-to-calendar\";\nimport Divider from '@material-ui/core/Divider';\nimport 'react-add-to-calendar/dist/react-add-to-calendar.css';\nimport swal from 'sweetalert';\nimport './EventsList.css';\n\nlet icon = { textOnly: 'none' };\n\nlet items = [\n    { outlook: 'Outlook' },\n    { outlookcom: 'Outlook.com' },\n    { apple: 'iCalendar' },\n    { google: 'Google' },\n];\n\nlet label = ['ADD TO CALENDAR'];\n\nclass EventDialog extends Component {\n    state = {\n        open: false,\n        person_id: null,\n        event_id: null,\n        event: {\n            title: 'Sample Event',\n            description: 'This is the sample event provided as an example only',\n            location: 'Portland, OR',\n            startTime: '2016-09-16T20:15:00-04:00',\n            endTime: '2016-09-16T21:45:00-04:00'\n        },\n    };\n\n    handleClickOpen = () => {\n        this.setState({\n            open: true,\n            person_id: this.props.reduxStore.user.id,\n            event_id: this.props.event_id,\n            event: {\n                title: this.props.event_name,\n                description: this.props.event_description,\n                location: this.props.event_country,\n                startTime: this.props.event_start_date,\n                endTime: this.props.event_end_date\n            },\n        });\n    };\n\n    handleCancel = () => {\n        this.setState({\n            open: false,\n        });\n    };\n\n\n\n\n    handleClose = () => {\n        if (this.props.reduxStore.user.id) {\n            const action = ({ type: 'REGISTER_FOR_EVENT', payload: this.state });\n            this.props.dispatch(action);\n            this.setState({\n                open: false,\n                person_id: null,\n                event_id: null,\n            });\n            swal({\n                title: `Thank You, ${this.props.reduxStore.user.name}!`,\n                text: `You have successfully signed up for ${this.props.event_name}`,\n                icon: \"success\",\n                buttons: {\n                    confirm: \"Close\"\n                }\n            })\n        } else {\n            swal({\n                title: \"Please Sign In\",\n                text: \"An account is required to register for an event\",\n                icon: \"info\",\n                buttons: {\n                    confirm: \"Create Account\"\n                }\n            })\n                .then(function () {\n                    window.location.href = ('/account');\n                })\n        }\n    };\n\n    componentDidMount() {\n        this.props.dispatch({ type: 'FETCH_EVENTS' });\n        this.props.dispatch({ type: 'FETCH_USERS' });\n    }\n\n    render() {\n        return (\n            <div id=\"dialog\">\n                {/* {JSON.stringify(this.props.event_id)} */}\n                <Button\n                    id=\"more-info-btn\"\n                    size=\"small\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={this.handleClickOpen}\n                >\n                    More Info\n              </Button>\n                <Dialog\n                    disableBackdropClick\n                    disableEscapeKeyDown\n                    open={this.state.open}\n                    onClose={this.handleClose}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">Additional Info</DialogTitle>\n                    <DialogContent>\n                        {/* {JSON.stringify(this.props.event_id)} */}\n                        <Typography variant=\"body1\">\n                            Cost: free\n                        </Typography>\n                        <Typography variant=\"body1\">\n                            Location: {this.props.event_city}, {this.props.event_country}\n                        </Typography>\n                        <Typography variant=\"body1\">\n                            Venue: {this.props.event_host}\n                        </Typography>\n                        <Typography variant=\"body1\">\n                            Time: {this.props.event_time}\n                        </Typography>\n                        <Divider id=\"description-divider\" />\n                        <Typography variant=\"body1\">\n                            {this.props.event_description}\n                        </Typography>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            onClick={this.handleCancel}\n                            color=\"primary\"\n                        >\n                            Cancel\n                         </Button>\n                        <Button\n                            onClick={this.handleClose}\n                            color=\"primary\">\n                            Register\n                        </Button>\n\n\n                        <AddToCalendar\n                            className='test'\n                            event={this.state.event}\n                            buttonTemplate={icon}\n                            buttonLabel={label}\n                            listItems={items}\n                            displayItemIcons={false}\n                        />\n                    </DialogActions>\n                </Dialog>\n            </div >\n        );\n    }\n}\n\nconst mapStoreToProps = reduxStore => ({\n    reduxStore,\n});\n\nexport default connect(mapStoreToProps)(EventDialog);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport EventDialog from './EventDialog';\nimport Divider from '@material-ui/core/Divider';\n\nimport moment from 'moment';\n\n\nimport './EventsList.css';\n\n// import Link from '@material-ui/core/Link';\n// import Chip from '@material-ui/core/Chip';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import { CardActionArea } from '@material-ui/core';\n\nconst styles = theme => ({\n    card: {\n        width: 400,\n        height: 300,\n        margin: 20,\n    },\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n    },\n\n    actions: {\n        display: 'flex',\n        align: 'center'\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n});\n\nclass EventsList extends Component {\n    state = { expanded: false };\n\n    handleExpandClick = () => {\n        this.setState(state => ({ expanded: !state.expanded }));\n    };\n\n\n    componentDidMount() {\n        const action = { type: 'FETCH_EVENTS' }\n        this.props.dispatch(action);\n    }\n    render() {\n        const { classes } = this.props;\n        return (\n            <Grid item lg={24}>\n                <Card id=\"list-card\" className={classes.card}>\n                    <CardHeader id=\"card-header\"\n                        title={this.props.result.event_name}\n                        subheader={this.props.result.event_city}\n\n                    />\n                    <Divider />\n                    <center>\n\n                        <CardContent\n                            id=\"description-body\"\n\n                        >\n                            <Typography variant=\"p\">\n                                {moment(this.props.result.event_start_date).format(\"MMMM Do, YYYY\")} - {moment(this.props.result.event_end_date).format(\"MMMM Do, YYYY\")}\n                            </Typography>\n\n                            <CardActions className={classes.actions} disableActionSpacing>\n                                <EventDialog\n                                    person_name={this.props.reduxStore.attendees.name}\n                                    event_id={this.props.result.id}\n                                    event_host={this.props.result.event_host}\n                                    event_country={this.props.result.event_country}\n                                    event_city={this.props.result.event_city}\n                                    event_name={this.props.result.event_name}\n                                    event_time={this.props.result.event_time}\n                                    event_description={this.props.result.event_description}\n\n\n                                />\n                                {/* <Button value={this.props.result.id} id=\"register-btn\" size=\"small\" variant=\"contained\">Register</Button> */}\n                            </CardActions>\n\n                        </CardContent>\n                    </center>\n\n\n\n                </Card>\n            </Grid>\n        );\n    }\n}\n\nEventsList.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStoreToProps = reduxStore => ({\n    reduxStore,\n});\n\nexport default connect(mapStoreToProps)(withStyles(styles)(EventsList));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport EventsList from './../Events/EventsList';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport './Events.css';\nimport { Typography } from '@material-ui/core';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nclass Events extends Component {\n\n  componentDidMount() {\n    const action = { type: 'FETCH_EVENTS' };\n    this.props.dispatch(action);\n  }\n\n  render() {\n    return (\n      <div>\n        <center>\n          <Paper id=\"events-paper\" elevation={4}\n          >\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              {this.props.reduxStore.events.map((result, i) => (\n\n                <EventsList history={this.props.history} key={i} result={result} />\n              ))}\n            </Grid>\n          </Paper>\n        </center>\n      </div>\n\n    )\n  }\n};\n\n\nconst mapStoreToProps = reduxStore => ({\n  reduxStore,\n});\n\nexport default connect(mapStoreToProps)(Events);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport swal from 'sweetalert';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport './Events.css';\n\n\n\nconst styles = theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n    },\n    descriptionField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        width: 600,\n    },\n    dense: {\n        marginTop: 16,\n    },\n    menu: {\n        width: 200,\n    },\n\n});\n\nclass CreateEventForm extends Component {\n    state = {\n        event_name: 'Event Name',\n        event_start_date: 'Start Date (YYYY/MM/DD)',\n        event_end_date: 'End Date (YYYY/MM/DD)',\n        event_time: 'Event Time (HH:MM - HH:MM)',\n        event_city: 'Event City',\n        event_country: 'Event Country',\n        event_host: 'Event Host',\n        event_description: 'Description',\n    };\n\n    handleChange = propertyName => event => {\n        this.setState({\n            [propertyName]: event.target.value,\n        });\n    };\n\n\n\n    handleCreateEvent = event => {\n        event.preventDefault();\n        const action = ({ type: 'CREATE_EVENT', payload: this.state });\n        this.props.dispatch(action);\n        swal('Awesome!', 'You have successfully added an event!', 'success');\n        this.setState({\n            event_name: 'Event Name',\n            event_start_date: 'Start Date (YYYY/MM/DD)',\n            event_end_date: 'End Date (YYYY/MM/DD)',\n            event_time: 'Event Time (HH:MM - HH:MM)',\n            event_city: 'Event City',\n            event_country: 'Event Country',\n            event_host: 'Event Host',\n            event_description: 'Description',\n        });\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Paper id='text-paper' elevation={3}>\n                <center>\n                    <Typography id='form-title' variant='h6'>\n                        Create An Event\n                </Typography>\n\n                    <form id='input-form' className={classes.container} noValidate autoComplete=\"off\">\n\n                        <TextField\n                            required\n                            id=\"outlined-name\"\n                            label=\"Required\"\n                            className={classes.textField}\n                            value={this.state.event_name}\n                            onChange={this.handleChange('event_name')}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            id=\"outlined-start_date\"\n                            label=\"Required\"\n                            className={classes.textField}\n                            value={this.state.event_start_date}\n                            onChange={this.handleChange('event_start_date')}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            id=\"outlined-end-date\"\n                            label=\"Required\"\n                            className={classes.textField}\n                            value={this.state.event_end_date}\n                            onChange={this.handleChange('event_end_date')}\n                            variant='outlined'\n                            margin=\"normal\"\n                        />\n                        <TextField\n                            required\n                            id=\"outlined-time\"\n                            label=\"Required\"\n                            className={classes.textField}\n                            value={this.state.event_time}\n                            onChange={this.handleChange('event_time')}\n                            variant='outlined'\n                            margin=\"normal\"\n                        />\n                        <TextField\n                            required\n                            id=\"outlined-city\"\n                            label=\"Required\"\n                            className={classes.textField}\n                            value={this.state.event_city}\n                            onChange={this.handleChange('event_city')}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            id=\"outlined-country\"\n                            label=\"Required\"\n                            className={classes.textField}\n                            value={this.state.event_country}\n                            onChange={this.handleChange('event_country')}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            id=\"outlined-host\"\n                            label=\"Required\"\n                            className={classes.textField}\n                            value={this.state.event_host}\n                            onChange={this.handleChange('event_host')}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                        />\n                        <TextField\n                            required\n                            id=\"outlined-description\"\n                            label=\"Required\"\n                            className={classes.descriptionField}\n                            value={this.state.event_description}\n                            onChange={this.handleChange('event_description')}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                        />\n                    </form>\n                    <Button color=\"primary\" className={classes.button} id='submit-btn'\n                        onClick={this.handleCreateEvent} variant='contained'>Submit</Button>\n                </center>\n            </Paper>\n        );\n    }\n}\n\nCreateEventForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nconst mapStoreToProps = reduxStore => ({\n    reduxStore,\n});\n\nexport default connect(mapStoreToProps)(withStyles(styles)(CreateEventForm));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CreateEventForm from './../Events/CreateEventForm';\nimport Button from '@material-ui/core/Button';\nimport ArrowLeft from '@material-ui/icons/ArrowLeft';\nimport Typography from '@material-ui/core/Typography';\n\nimport './Events.css';\n\n\n\nclass CreateEvent extends Component {\n    changePage = () => {\n        this.props.history.push('/dashboard');\n    }\n\n    render() {\n        return (\n            <div>\n                <Button id=\"return-btn\" color=\"primary\" onClick={this.changePage} variant=\"contained\"><ArrowLeft />Return to Dashboard</Button>\n                <CreateEventForm />\n            </div>\n        )\n    }\n};\n\n\nexport default connect()(CreateEvent);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n// import NewsList from './NewsList';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nclass News extends Component {\n\n    componentDidMount() {\n        const action = { type: 'FETCH_NEWS' };\n        this.props.dispatch(action);\n    }\n\n    render() {\n        return (\n            <Paper id=\"news-paper\" elevation={3}\n            >\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"space-evenly\"\n                    alignItems=\"center\"\n                >\n                    {/* {this.props.reduxStore.events.map((result, i) => (\n\n            <EventsList history={this.props.history} key={i} result={result} />\n          ))} */}\n                </Grid>\n            </Paper>\n\n        )\n    }\n};\n\n\nconst mapStoreToProps = reduxStore => ({\n    reduxStore,\n});\n\nexport default connect(mapStoreToProps)(News);\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass AddNews extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Add News</h1>\n            </div>\n        )\n    }\n};\n\n\nexport default AddNews;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\n\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport UserPage from '../UserPage/UserPage';\nimport Events from '../Events/Events';\nimport CreateEvent from '../Events/CreateEvent';\nimport Dashboard from './../Admin/Dashboard/Dashboard';\nimport News from '../News/News';\nimport AddNews from '../News/AddNews';\n\n\n\n// import './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_USER' })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/account\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            <Route\n              exact\n              path=\"/news\"\n              component={News}\n            />\n            <Route\n              exact\n              path=\"/add-news\"\n              component={AddNews}\n            />\n\n\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/account\"\n              component={UserPage}\n            />\n\n\n            <ProtectedRoute\n              exact\n              path=\"/dashboard\"\n              component={Dashboard}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <Route\n              exact\n              path=\"/events\"\n              component={Events}\n            />\n\n\n            <Route\n              exact\n              path=\"/create-event\"\n              component={CreateEvent}\n            />\n\n            <Route\n              exact\n              path=\"/news\"\n              component={News}\n            />\n\n            <Route\n              exact\n              path=\"/add-news\"\n              component={AddNews}\n            />\n\n\n\n\n\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default connect()(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('react-root'));\n"],"sourceRoot":""}